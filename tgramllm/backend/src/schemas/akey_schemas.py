"""
tgrambuddy/tgramllm/src/llm/schemas/akey_schemas.py

"""
from typing import (
    Optional,
    Dict,
    Any
)
from datetime import datetime
from pydantic import (
    BaseModel,
    Field
)

class ApiKeyBase(BaseModel):
    """Base schema for API Key, containing common attributes."""
    key: str = Field(...,
                     max_length=64,
                     description="API key value")

    name: str = Field(...,
                      description="A descriptive name for the API key.")    

    permissions: Optional[Dict[str, Any]] = Field(default=None,
                                                  description="Custom permissions for the API key, e.g., \
                                                  {'read': true, 'write': false}."
    )
    custom_data: Optional[Dict[str, Any]] = Field(default=None,
                                                  description="Arbitrary metadata for the API key, e.g., \
                                                  IP restrictions, tags."
    )

    model_config = {
        "from_attributes": True
    }

class ApiKeyCreate(ApiKeyBase):
    """Schema for creating a new API Key.
    The actual key string and its hash are generated by the server.
    'created_by' will be inferred from the authenticated user.
    """
    created_by: int = Field(...,
                            description="The ID of the user who created the API key.")
   
    is_active: Optional[bool] = Field(
        default=True, description="Whether the API key is active. Defaults to true."
    )

class ApiKeyUpdate(BaseModel):
    """Schema for updating an existing API Key. All fields are optional."""

    name: Optional[str] = Field(default=None,
                                description="A new descriptive name for the API key.")

    is_active: Optional[bool] = Field(default=None,
                                      description="Set to true to activate, false to \
                                          deactivate the API key.")

    permissions: Optional[Dict[str, Any]] = Field(default=None,
                                                  description="New custom permissions \
                                                      for the API key.")

    metadata: Optional[Dict[str, Any]] = Field(default=None,
                                               description="New arbitrary metadata for the API key.")

class ApiKeyRead(ApiKeyBase):
    """Schema for reading/returning API Key information (excluding the secret key itself)."""

    id: int = Field(...,
                    description="The unique identifier of the API key.")

    is_active: bool = Field(...,
                            description="Whether the API key is currently active.")

    created_at: datetime = Field(...,
                                 description="The timestamp when the API key was created.")

    created_by: int = Field(...,
                            description="The ID of the user who created the API key.")

class ApiKeyGenerated(ApiKeyRead):
    """Schema for returning API Key information immediately after creation,
    including the generated secret API key. This should be shown to the user only once.
    """

    api_key: str = Field(...,
                         description="The generated secret API key. Store this securely, \
                             it will not be shown again.")
